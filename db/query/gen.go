// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Company         *company
	CompanyEmployee *companyEmployee
	Employee        *employee
	GorpMigration   *gorpMigration
	List            *list
	ListCompany     *listCompany
	User            *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Company = &Q.Company
	CompanyEmployee = &Q.CompanyEmployee
	Employee = &Q.Employee
	GorpMigration = &Q.GorpMigration
	List = &Q.List
	ListCompany = &Q.ListCompany
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Company:         newCompany(db, opts...),
		CompanyEmployee: newCompanyEmployee(db, opts...),
		Employee:        newEmployee(db, opts...),
		GorpMigration:   newGorpMigration(db, opts...),
		List:            newList(db, opts...),
		ListCompany:     newListCompany(db, opts...),
		User:            newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Company         company
	CompanyEmployee companyEmployee
	Employee        employee
	GorpMigration   gorpMigration
	List            list
	ListCompany     listCompany
	User            user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Company:         q.Company.clone(db),
		CompanyEmployee: q.CompanyEmployee.clone(db),
		Employee:        q.Employee.clone(db),
		GorpMigration:   q.GorpMigration.clone(db),
		List:            q.List.clone(db),
		ListCompany:     q.ListCompany.clone(db),
		User:            q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Company:         q.Company.replaceDB(db),
		CompanyEmployee: q.CompanyEmployee.replaceDB(db),
		Employee:        q.Employee.replaceDB(db),
		GorpMigration:   q.GorpMigration.replaceDB(db),
		List:            q.List.replaceDB(db),
		ListCompany:     q.ListCompany.replaceDB(db),
		User:            q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Company         ICompanyDo
	CompanyEmployee ICompanyEmployeeDo
	Employee        IEmployeeDo
	GorpMigration   IGorpMigrationDo
	List            IListDo
	ListCompany     IListCompanyDo
	User            IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Company:         q.Company.WithContext(ctx),
		CompanyEmployee: q.CompanyEmployee.WithContext(ctx),
		Employee:        q.Employee.WithContext(ctx),
		GorpMigration:   q.GorpMigration.WithContext(ctx),
		List:            q.List.WithContext(ctx),
		ListCompany:     q.ListCompany.WithContext(ctx),
		User:            q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
