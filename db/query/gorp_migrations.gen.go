// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Silimim/hrapid-backend/db/model"
)

func newGorpMigration(db *gorm.DB, opts ...gen.DOOption) gorpMigration {
	_gorpMigration := gorpMigration{}

	_gorpMigration.gorpMigrationDo.UseDB(db, opts...)
	_gorpMigration.gorpMigrationDo.UseModel(&model.GorpMigration{})

	tableName := _gorpMigration.gorpMigrationDo.TableName()
	_gorpMigration.ALL = field.NewAsterisk(tableName)
	_gorpMigration.ID = field.NewString(tableName, "id")
	_gorpMigration.AppliedAt = field.NewTime(tableName, "applied_at")

	_gorpMigration.fillFieldMap()

	return _gorpMigration
}

type gorpMigration struct {
	gorpMigrationDo

	ALL       field.Asterisk
	ID        field.String
	AppliedAt field.Time

	fieldMap map[string]field.Expr
}

func (g gorpMigration) Table(newTableName string) *gorpMigration {
	g.gorpMigrationDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gorpMigration) As(alias string) *gorpMigration {
	g.gorpMigrationDo.DO = *(g.gorpMigrationDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gorpMigration) updateTableName(table string) *gorpMigration {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.AppliedAt = field.NewTime(table, "applied_at")

	g.fillFieldMap()

	return g
}

func (g *gorpMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gorpMigration) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 2)
	g.fieldMap["id"] = g.ID
	g.fieldMap["applied_at"] = g.AppliedAt
}

func (g gorpMigration) clone(db *gorm.DB) gorpMigration {
	g.gorpMigrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gorpMigration) replaceDB(db *gorm.DB) gorpMigration {
	g.gorpMigrationDo.ReplaceDB(db)
	return g
}

type gorpMigrationDo struct{ gen.DO }

type IGorpMigrationDo interface {
	gen.SubQuery
	Debug() IGorpMigrationDo
	WithContext(ctx context.Context) IGorpMigrationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGorpMigrationDo
	WriteDB() IGorpMigrationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGorpMigrationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGorpMigrationDo
	Not(conds ...gen.Condition) IGorpMigrationDo
	Or(conds ...gen.Condition) IGorpMigrationDo
	Select(conds ...field.Expr) IGorpMigrationDo
	Where(conds ...gen.Condition) IGorpMigrationDo
	Order(conds ...field.Expr) IGorpMigrationDo
	Distinct(cols ...field.Expr) IGorpMigrationDo
	Omit(cols ...field.Expr) IGorpMigrationDo
	Join(table schema.Tabler, on ...field.Expr) IGorpMigrationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGorpMigrationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGorpMigrationDo
	Group(cols ...field.Expr) IGorpMigrationDo
	Having(conds ...gen.Condition) IGorpMigrationDo
	Limit(limit int) IGorpMigrationDo
	Offset(offset int) IGorpMigrationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGorpMigrationDo
	Unscoped() IGorpMigrationDo
	Create(values ...*model.GorpMigration) error
	CreateInBatches(values []*model.GorpMigration, batchSize int) error
	Save(values ...*model.GorpMigration) error
	First() (*model.GorpMigration, error)
	Take() (*model.GorpMigration, error)
	Last() (*model.GorpMigration, error)
	Find() ([]*model.GorpMigration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GorpMigration, err error)
	FindInBatches(result *[]*model.GorpMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GorpMigration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGorpMigrationDo
	Assign(attrs ...field.AssignExpr) IGorpMigrationDo
	Joins(fields ...field.RelationField) IGorpMigrationDo
	Preload(fields ...field.RelationField) IGorpMigrationDo
	FirstOrInit() (*model.GorpMigration, error)
	FirstOrCreate() (*model.GorpMigration, error)
	FindByPage(offset int, limit int) (result []*model.GorpMigration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGorpMigrationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gorpMigrationDo) Debug() IGorpMigrationDo {
	return g.withDO(g.DO.Debug())
}

func (g gorpMigrationDo) WithContext(ctx context.Context) IGorpMigrationDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gorpMigrationDo) ReadDB() IGorpMigrationDo {
	return g.Clauses(dbresolver.Read)
}

func (g gorpMigrationDo) WriteDB() IGorpMigrationDo {
	return g.Clauses(dbresolver.Write)
}

func (g gorpMigrationDo) Session(config *gorm.Session) IGorpMigrationDo {
	return g.withDO(g.DO.Session(config))
}

func (g gorpMigrationDo) Clauses(conds ...clause.Expression) IGorpMigrationDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gorpMigrationDo) Returning(value interface{}, columns ...string) IGorpMigrationDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gorpMigrationDo) Not(conds ...gen.Condition) IGorpMigrationDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gorpMigrationDo) Or(conds ...gen.Condition) IGorpMigrationDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gorpMigrationDo) Select(conds ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gorpMigrationDo) Where(conds ...gen.Condition) IGorpMigrationDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gorpMigrationDo) Order(conds ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gorpMigrationDo) Distinct(cols ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gorpMigrationDo) Omit(cols ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gorpMigrationDo) Join(table schema.Tabler, on ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gorpMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gorpMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gorpMigrationDo) Group(cols ...field.Expr) IGorpMigrationDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gorpMigrationDo) Having(conds ...gen.Condition) IGorpMigrationDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gorpMigrationDo) Limit(limit int) IGorpMigrationDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gorpMigrationDo) Offset(offset int) IGorpMigrationDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gorpMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGorpMigrationDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gorpMigrationDo) Unscoped() IGorpMigrationDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gorpMigrationDo) Create(values ...*model.GorpMigration) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gorpMigrationDo) CreateInBatches(values []*model.GorpMigration, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gorpMigrationDo) Save(values ...*model.GorpMigration) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gorpMigrationDo) First() (*model.GorpMigration, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Take() (*model.GorpMigration, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Last() (*model.GorpMigration, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Find() ([]*model.GorpMigration, error) {
	result, err := g.DO.Find()
	return result.([]*model.GorpMigration), err
}

func (g gorpMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GorpMigration, err error) {
	buf := make([]*model.GorpMigration, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gorpMigrationDo) FindInBatches(result *[]*model.GorpMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gorpMigrationDo) Attrs(attrs ...field.AssignExpr) IGorpMigrationDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gorpMigrationDo) Assign(attrs ...field.AssignExpr) IGorpMigrationDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gorpMigrationDo) Joins(fields ...field.RelationField) IGorpMigrationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gorpMigrationDo) Preload(fields ...field.RelationField) IGorpMigrationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gorpMigrationDo) FirstOrInit() (*model.GorpMigration, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GorpMigration), nil
	}
}

func (g gorpMigrationDo) FirstOrCreate() (*model.GorpMigration, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GorpMigration), nil
	}
}

func (g gorpMigrationDo) FindByPage(offset int, limit int) (result []*model.GorpMigration, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gorpMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gorpMigrationDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gorpMigrationDo) Delete(models ...*model.GorpMigration) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gorpMigrationDo) withDO(do gen.Dao) *gorpMigrationDo {
	g.DO = *do.(*gen.DO)
	return g
}
